const jwt = require('jsonwebtoken')
const User = require('../models/UserModel')
const { generateAccessToken, generateRefreshToken } = require('../services/jwtService')
const bcrypt = require('bcrypt')
const mongoose = require('mongoose')

const createUser = async (newUser) => {
    return new Promise(async (resolve, reject) => {
        const { email, password, confirmPassword } = newUser

        try {
            const checkUser = await User.findOne({ email })
            if (checkUser) {
                return resolve({
                    status: 'ERR',
                    message: 'Email ƒë√£ t·ªìn t·∫°i'
                })
            }

            if (password !== confirmPassword) {
                return resolve({
                    status: 'ERR',
                    message: 'M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp'
                })
            }

            const hash = bcrypt.hashSync(password, 10)

            // üîí T·∫°o access_token v√† refresh_token
            const access_token = generateAccessToken({ email })
            const refresh_token = generateRefreshToken({ email })
            

            const createdUser = await User.create({
                name,
                email,
                password: hash,
                access_token, 
                refresh_token  
            });

            if (createdUser) {
                return resolve({
                    status: 'OK',
                    message: 'T·∫°o t√†i kho·∫£n th√†nh c√¥ng',
                    data: createdUser
                })
            } else {
                return resolve({
                    status: 'ERR',
                    message: 'Kh√¥ng th·ªÉ t·∫°o t√†i kho·∫£n, vui l√≤ng th·ª≠ l·∫°i sau'
                })
            }
        } catch (e) {
            console.error('L·ªói trong UserService:', e)
            return reject({
                status: 'ERR',
                message: 'ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh t·∫°o t√†i kho·∫£n',
                error: e.message
            })
        }
    })
}

const loginUser = (userLogin) => {
    return new Promise(async (resolve, reject) => {
        const { email, password } = userLogin
        try {
            const checkUser = await User.findOne({ email })
            if (!checkUser) {
                return resolve({ status: 'ERR', message: 'Email kh√¥ng t·ªìn t·∫°i' })
            }

            const comparePassword = await bcrypt.compare(password, checkUser.password)
            if (!comparePassword) {
                return resolve({ status: 'ERR', message: 'M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng' })
            }

            // üîê T·∫°o Access Token v√† Refresh Token
            let access_token, refresh_token
            try {
                access_token = await generateAccessToken({
                    id: checkUser.id,
                    isAdmin: checkUser.isAdmin,
                    email: checkUser.email
                })

                refresh_token = await generateRefreshToken({
                    id: checkUser.id,
                    isAdmin: checkUser.isAdmin,
                    email: checkUser.email
                })
            } catch (tokenError) {
                console.error('L·ªói khi t·∫°o token:', tokenError)
                return reject({
                    status: 'ERR',
                    message: 'ƒê√£ x·∫£y ra l·ªói khi t·∫°o token',
                    error: tokenError.message
                })
            }

            resolve({
                status: 'OK',
                message: 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng',
                access_token,
                refresh_token,
            })
        } catch (e) {
            console.error('L·ªói trong UserService:', e)
            reject({
                status: 'ERR',
                message: 'ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh ƒëƒÉng nh·∫≠p',
                error: e.message
            })
        }
    })
}

const updateUser = (id, data) => {
    return new Promise(async (resolve, reject) => {
        try {
            const checkUser = await User.findOne({
                _id: id
            })
            console.log(checkUser)

            if (!checkUser) {
                return resolve({
                    status: 'ERR',
                    message: 'ID kh√¥ng t·ªìn t·∫°i',
                })
            }

            const updatedUser = await User.findByIdAndUpdate(id, data, { new: true })

            resolve({
                status: 'OK',
                message: 'C·∫≠p nh·∫≠t th√†nh c√¥ng',
                data: updatedUser
            })
        } catch (e) {
            console.error('L·ªói trong UserService:', e)
            reject({
                status: 'ERR',
                message: 'ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh c·∫≠p nh·∫≠t',
                error: e.message
            })
        }
    })
}

const deleteUser = (id) => {
    return new Promise(async (resolve, reject) => {
        try {
            if (!mongoose.isValidObjectId(id)) {
                return resolve({
                    status: 'ERR',
                    message: 'ID kh√¥ng h·ª£p l·ªá'
                })
            }

            const checkUser = await User.findOne({ _id: id })

            if (!checkUser) {
                return resolve({
                    status: 'ERR',
                    message: 'ID kh√¥ng t·ªìn t·∫°i',
                })
            }

            const deletedUser = await User.findByIdAndDelete(id)
            if (!deletedUser) {
                return resolve({
                    status: 'ERR',
                    message: 'Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ b·ªã xo√° tr∆∞·ªõc ƒë√≥'
                })
            }else{
                resolve({
                    status: 'OK',
                    message: 'Xo√° ng∆∞·ªùi d√πng th√†nh c√¥ng'
                })
            }
        } catch (e) {
            console.error('L·ªói trong UserService:', e)
            reject({
                status: 'ERR',
                message: 'ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh xo√° ng∆∞·ªùi d√πng',
                error: e.message
            })
        }
    })
}

const getAllUser = () => {
    return new Promise(async (resolve, reject) => {
        try {
            const allUser = await User.find()
            resolve({
                status: 'OK',
                message: 'L·∫•y danh s√°ch ng∆∞·ªùi d√πng th√†nh c√¥ng',
                data: allUser
            })
        } catch (e) {
            console.error('L·ªói trong UserService:', e)
            reject({
                status: 'ERR',
                message: 'ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh l·∫•y danh s√°ch ng∆∞·ªùi d√πng',
                error: e.message
            })
        }
    })
}

const getDetailUser = (id) => {
    return new Promise(async (resolve, reject) => {
        try {

            const user = await User.findOne({ _id: id })

            if (!user) {
                return resolve({
                    status: 'ERR',
                    message: 'ID kh√¥ng t·ªìn t·∫°i',
                })
            }
                resolve({
                    status: 'OK',
                    message: 'th√†nh c√¥ng',
                    data: user
                })
        } catch (e) {
            console.error('L·ªói trong UserService:', e)
            reject({
                status: 'ERR',
                message: 'ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh l·∫•y th√¥ng tin ng∆∞·ªùi d√πng',
                error: e.message
            })
        }
    })
}


module.exports = {
    createUser,
    loginUser,
    updateUser,
    deleteUser,
    getAllUser,
    getDetailUser
}
